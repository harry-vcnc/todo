import Head from 'next/head';
import styles from '../styles/Home.module.css';
import { useDispatch, useSelector } from 'react-redux';
import { selectFilteredToDos, todoActions } from '@root/to-do/slice';
import { RootState } from './store';
import { ToDoItemType, ToDoStatus } from '@root/to-do/types';
import { useEffect, useState } from 'react';
import ToDoForm from '@root/to-do/components/ToDoForm';
import ToDoItem from '@root/to-do/components/ToDoItem';

// selector -> 스토어 전체 변화를 바라보는 것을 최적화
// createSelector() 의 selector 함수로 주어지는 스코프로 범위가 줄어든다
// 인자로 여러개를 넘기면
// useEffect 등의 dep array [items, statusFilter]처럼 동작하는가?

export default function Home() {
  const dispatch = useDispatch();
  const [statusFilter, setStatusFilter] = useState<ToDoStatus>('OPEN');
  const filteredToDos = useSelector((state: RootState) =>
    selectFilteredToDos(state, statusFilter),
  );

  useEffect(() => {
    dispatch(todoActions.requestGetToDo());
  }, [dispatch]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Saga To-Do App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <h1 className={styles.title}>To-Do List</h1>
        <ToDoForm />
        <select
          onChange={(event) =>
            setStatusFilter(event.target.value as ToDoStatus)
          }
        >
          <option value="OPEN">OPEN</option>
          <option value="IN_PROGRESS">IN_PROGRESS</option>
          <option value="DONE">DONE</option>
        </select>
        {filteredToDos.map((toDo: ToDoItemType) => (
          <ToDoItem {...toDo} key={toDo.id} />
        ))}
      </main>
    </div>
  );
}
